// Task 2:


// Write a function that does the following task.


// Given two strings needle and haystack, return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.


// Also, mention the Time and Space Complexity of your solution


// Constraints: 



// 1 <= haystack.length, needle.length <= 10^4

// haystack and needle consist of only lowercase English characters.


// Example 1:


// Input: haystack = "sadbutsad", needle = "sad"
// Output: 0
// Explanation: "sad" occurs at index 0 and 6.
// The first occurrence is at index 0, so we return 0.


// Example 2:


// Input: haystack = "codemama", needle = "ostad"
// Output: -1

//Solution:

/**
 * @param {string} haystack - The string to search within.
 * @param {string} needle - The string to search for.
 * @returns {number} - Index of `needle` in `haystack`, or -1 if not found.
 */
function strStr(haystack, needle) {
    // If needle is an empty string, return 0
    if (needle.length === 0) {
        return 0;
    }

    const n = haystack.length;
    const m = needle.length;

    for (let i = 0; i <= n - m; i++) {
        let match = true;
        for (let j = 0; j < m; j++) {
            if (haystack[i + j] !== needle[j]) {
                match = false;
                break;
            }
        }
        if (match) {
            return i;
        }
    }

    return -1;
}


console.log(strStr("sadbutsad", "sad")); // Output: 0
console.log(strStr("codemama", "ostad")); // Output: -1

// Time Complexity: O(n * m)
// Space Complexity: O(1)
